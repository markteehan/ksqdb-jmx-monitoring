version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_JMX_PORT: 3001
      ZOOKEEPER_JMX_HOSTNAME: "zookeeper"

  kafka1:
    image: confluentinc/cp-enterprise-kafka:5.4.0
    container_name: kafka1
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 3001:3001
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_JMX_PORT: 3001
      KAFKA_JMX_HOSTNAME: "kafka1"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:29092,HOST://kafka1:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka1:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'

  schema-registry:
    image: confluentinc/cp-schema-registry:5.4.0
    ports:
      - 8081:8081
    container_name: schema-registry
    depends_on:
      - kafka1
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:29092
      SCHEMA_REGISTRY_CUB_KAFKA_TIMEOUT: 300

  ksqldb:
    image: confluentinc/ksqldb-server:0.7.1
    hostname: ksqldb
    container_name: ksqldb
    depends_on:
      - kafka1
      - schema-registry
      - kafka-connect-01
    ports:
      - 8088:8088
    environment:
      KSQL_JMX_OPTS: "-Djava.rmi.server.hostname=ksqldb -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=3001 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.rmi.port=3001" 
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: kafka1:29092
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQL_CONNECT_URL: http://kafka-connect-01:8083
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KSQL_KSQL_SERVICE_ID: gde01
      KSQL_KSQL_INTERNAL_TOPIC_REPLICAS: 1

  ksqldb-cli:
    image: confluentinc/ksqldb-cli:0.7.1
    container_name: ksqldb-cli
    depends_on:
      - ksqldb
      - postgres
    entrypoint: /bin/sh
    tty: true

  kafka-connect-01:
    image: confluentinc/cp-kafka-connect:5.4.0
    container_name: kafka-connect-01
    depends_on:
      - kafka1
      - schema-registry
      - postgres
    ports:
      - 8083:8083
    environment:
      JMX_PORT: 3001
      JMX_HOSTNAME: kafka-connect-01
      CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: "[%d] %p %X{connector.context}%m (%c:%L)%n"
      CONNECT_CUB_KAFKA_TIMEOUT: 300
      CONNECT_BOOTSTRAP_SERVERS: "kafka1:29092"
      CONNECT_REST_ADVERTISED_HOST_NAME: 'kafka-connect-01'
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: kafka-connect-group-01
      CONNECT_CONFIG_STORAGE_TOPIC: _kafka-connect-group-01-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _kafka-connect-group-01-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _kafka-connect-group-01-status
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_INTERNAL_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_INTERNAL_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_LOG4J_ROOT_LOGLEVEL: 'INFO'
      CONNECT_LOG4J_LOGGERS: 'org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR'
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_PLUGIN_PATH: '/usr/share/java,/usr/share/confluent-hub-components/'
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-5.4.0-beta1-SNAPSHOT.jar
    command:
      - bash
      - -c
      - |
        echo "Installing Connector"
        confluent-hub install --no-prompt confluentinc/kafka-connect-influxdb:1.1.2
        #
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run &
        #
        sleep infinity


  postgres:
      image: "postgres"
      container_name: "Postgres"
      environment:
        - POSTGRES_USER=postgres
        - POSTGRES_PASSWORD=postgres
        - POSTGRES_DB=mydb
        - "54320:5432"
      volumes:
        - ./data/postgres:/var/tmp/postgresql-data

  grafana:
    image: grafana/grafana:latest
    container_name: "grafana"
    links:
      - influxdb
    user: "501"
    ports:
      - "3000:3000"
    environment:
      - GF_DEFAULT_THEME=light
    volumes:
      - ./data/grafana:/var/lib/grafana

#!#  jmx-file:
#!#     image: jmxtrans/jmxtrans:latest
#!#     depends_on:
#!#       - kafka1
#!#     container_name: jmx-file
#!#     environment:
#!#       - SECONDS_BETWEEN_RUNS=3
#!#     volumes:
#!#      - ./config/file.json:/var/lib/jmxtrans/jmx.json

  jmx-gde:
     image: jmxtrans/jmxtrans:latest
     depends_on:
       - influxdb
       - kafka1
     container_name: jmx-gde
     environment:
       - SECONDS_BETWEEN_RUNS=3
     volumes:
      - ./config/gde.json:/var/lib/jmxtrans/jmx.json
 
  jmx-ksqldb:
     image: jmxtrans/jmxtrans:latest
     depends_on:
       - kafka1
       - ksqldb
     container_name: jmx-ksqldb
     environment:
       - SECONDS_BETWEEN_RUNS=3
     volumes:
      - ./config/ksql.json:/var/lib/jmxtrans/jmx.json

  jmx-connect:
     image: jmxtrans/jmxtrans:latest
     depends_on:
       - kafka-connect-01
       - influxdb
     container_name: jmx-connect
     environment:
       - SECONDS_BETWEEN_RUNS=3
     volumes:
      - ./config/connect.json:/var/lib/jmxtrans/jmx.json


#!#  jmx-kafka:
#!#     image: jmxtrans/jmxtrans:latest
#!#     depends_on:
#!#       - kafka1
#!#     container_name: jmx-kafka
#!#     environment:
#!#       - SECONDS_BETWEEN_RUNS=5
#!#     volumes:
#!#      - ./config/kafka.json:/var/lib/jmxtrans/jmx.json
 

  influxdb:
     image: influxdb:1.1.0-alpine
     container_name: influxdb
     environment:
       - INFLUXDB_HTTP_LOG_ENABLED=false
       - INFLUXDB_LOGGING_LEVEL=INFO
     ports:
       - 8086:8086
     volumes:
       - ./data/influx/:/var/lib/influxdb
 
  control-center:
    image: confluentinc/cp-enterprise-control-center:5.4.0
    container_name: control-center
    depends_on:
      - zookeeper
      - kafka1
      - schema-registry
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka1:29092'
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONTROL_CENTER_CONNECT_CDC_CLUSTER: "http://kafka-connect-01:8083"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      # The advertised URL needs to be the URL on which the browser
      #  can access the KSQL server (e.g. http://localhost:8088/info)
      CONTROL_CENTER_KSQL_URL: "http://ksqldb:8088"
      CONTROL_CENTER_KSQL_ADVERTISED_URL: "http://localhost:8088"
      # -v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v
      # Useful settings for development/laptop use - modify as needed for Prod
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_COMMAND_TOPIC_REPLICATION: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_REPLICATION: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_INTERNAL_TOPICS_REPLICATION: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_STREAMS_NUM_STREAM_THREADS: 1
      CONTROL_CENTER_STREAMS_CACHE_MAX_BYTES_BUFFERING: 104857600
      CONTROL_CENTER_DEPRECATED_VIEWS_ENABLE: "true"
    volumes:
       - monitoring_interceptors:/usr/share/java/monitoring-interceptors/

  chronograf:
    image: chronograf:latest
    container_name: chronograf
    volumes:
      # Mount for chronograf database
      - ./data/chronograf/:/var/lib/chronograf/
    ports:
      # The WebUI for Chronograf is served on port 8888
      - "8888:8888"
    depends_on:
      - influxdb
      - kafka1

volumes:
    # This volume is mounted on an image in which the interceptor JARs do exist
    # so that it can also be mounted on others where they do not, in order
    # that those others can also make use of the interceptors. Neat huh!
    # Props to ybyzek for this trick
    monitoring_interceptors: {}
